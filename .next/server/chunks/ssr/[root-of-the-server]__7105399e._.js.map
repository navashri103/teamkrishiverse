{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/verify-land-doc-authenticity.ts"],"sourcesContent":["// Verify Land Doc Authenticity\n\n'use server';\n\n/**\n * @fileOverview Verifies the authenticity of land ownership documents using AI.\n *\n * - verifyLandDocAuthenticity - A function that handles the land document authenticity verification process.\n * - VerifyLandDocAuthenticityInput - The input type for the verifyLandDocAuthenticity function.\n * - VerifyLandDocAuthenticityOutput - The return type for the verifyLandDocAuthenticity function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VerifyLandDocAuthenticityInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of a land ownership document, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type VerifyLandDocAuthenticityInput = z.infer<typeof VerifyLandDocAuthenticityInputSchema>;\n\nconst VerifyLandDocAuthenticityOutputSchema = z.object({\n  isAuthentic: z\n    .boolean()\n    .describe('Whether or not the land ownership document is authentic.'),\n  confidenceScore: z\n    .number()\n    .describe(\n      'A score between 0 and 1 indicating the confidence level of the authenticity verification.'\n    ),\n  reason: z\n    .string()\n    .describe('The reasoning behind the authenticity determination.'),\n});\nexport type VerifyLandDocAuthenticityOutput = z.infer<\n  typeof VerifyLandDocAuthenticityOutputSchema\n>;\n\nexport async function verifyLandDocAuthenticity(\n  input: VerifyLandDocAuthenticityInput\n): Promise<VerifyLandDocAuthenticityOutput> {\n  return verifyLandDocAuthenticityFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'verifyLandDocAuthenticityPrompt',\n  input: {schema: VerifyLandDocAuthenticityInputSchema},\n  output: {schema: VerifyLandDocAuthenticityOutputSchema},\n  prompt: `You are an AI expert in verifying the authenticity of land ownership documents.\n\nYou will receive a photo of a document and must determine if it is authentic or not.\n\nYou will provide a confidence score between 0 and 1 (where 1 is 100% confident) and a reason for your determination.\n\nPhoto: {{media url=photoDataUri}}`,\n});\n\nconst verifyLandDocAuthenticityFlow = ai.defineFlow(\n  {\n    name: 'verifyLandDocAuthenticityFlow',\n    inputSchema: VerifyLandDocAuthenticityInputSchema,\n    outputSchema: VerifyLandDocAuthenticityOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;;;AAI/B;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,aAAa,uIAAA,CAAA,IAAC,CACX,OAAO,GACP,QAAQ,CAAC;IACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CACP;IAEJ,QAAQ,uIAAA,CAAA,IAAC,CACN,MAAM,GACN,QAAQ,CAAC;AACd;AAKO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;;iCAMsB,CAAC;AAClC;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/validate-farm-crop-context.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview AI-powered validation of farm and crop context based on uploaded photos.\n *\n * - validateFarmCropContext - A function that validates if the uploaded photo matches the selected crop and task context.\n * - ValidateFarmCropContextInput - The input type for the validateFarmCropContext function.\n * - ValidateFarmCropContextOutput - The return type for the validateFarmCropContext function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ValidateFarmCropContextInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of the field or crops, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  cropType: z.string().describe('The type of crop selected by the farmer.'),\n  taskDescription: z.string().describe('The description of the task completed by the farmer.'),\n});\nexport type ValidateFarmCropContextInput = z.infer<typeof ValidateFarmCropContextInputSchema>;\n\nconst ValidateFarmCropContextOutputSchema = z.object({\n  isValidContext: z\n    .boolean()\n    .describe(\n      'Whether the photo content matches the selected crop and task context.'\n    ),\n  reason: z\n    .string()\n    .describe('The reason why the photo is considered valid or invalid.'),\n});\nexport type ValidateFarmCropContextOutput = z.infer<typeof ValidateFarmCropContextOutputSchema>;\n\nexport async function validateFarmCropContext(\n  input: ValidateFarmCropContextInput\n): Promise<ValidateFarmCropContextOutput> {\n  return validateFarmCropContextFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'validateFarmCropContextPrompt',\n  input: {schema: ValidateFarmCropContextInputSchema},\n  output: {schema: ValidateFarmCropContextOutputSchema},\n  prompt: `You are an AI assistant specializing in validating farm and crop contexts based on uploaded photos.\n\nYou will receive a photo, the selected crop type, and the description of a completed task.\nYour goal is to determine whether the content of the photo matches the provided crop and task context.\n\nHere is the information:\nCrop Type: {{{cropType}}}\nTask Description: {{{taskDescription}}}\nPhoto: {{media url=photoDataUri}}\n\nBased on the given information, determine if the photo provides sufficient evidence for the completed task related to the specified crop.\nExplain your reasoning for determining if the photo is considered valid or invalid in the \"reason\" field. Set the isValidContext field to true if it is, otherwise to false.\n`,\n});\n\nconst validateFarmCropContextFlow = ai.defineFlow(\n  {\n    name: 'validateFarmCropContextFlow',\n    inputSchema: ValidateFarmCropContextInputSchema,\n    outputSchema: ValidateFarmCropContextOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,gBAAgB,uIAAA,CAAA,IAAC,CACd,OAAO,GACP,QAAQ,CACP;IAEJ,QAAQ,uIAAA,CAAA,IAAC,CACN,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,wBACpB,KAAmC;IAEnC,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAkC;IAClD,QAAQ;QAAC,QAAQ;IAAmC;IACpD,QAAQ,CAAC;;;;;;;;;;;;AAYX,CAAC;AACD;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-sustainable-tips.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview AI flow for generating personalized sustainable farming tips.\n *\n * - generateSustainableTips - A function that generates personalized sustainable farming tips.\n * - SustainableTipsInput - The input type for the generateSustainableTips function.\n * - SustainableTipsOutput - The return type for the generateSustainableTips function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SustainableTipsInputSchema = z.object({\n  cropType: z.string().describe('The type of crop being grown.'),\n  landType: z.string().describe('The type of land being farmed.'),\n  currentTasks: z.string().describe('The current tasks being performed.'),\n});\nexport type SustainableTipsInput = z.infer<typeof SustainableTipsInputSchema>;\n\nconst SustainableTipsOutputSchema = z.object({\n  tip: z.string().describe('A single, short, personalized sustainable farming tip.'),\n});\nexport type SustainableTipsOutput = z.infer<typeof SustainableTipsOutputSchema>;\n\nexport async function generateSustainableTips(input: SustainableTipsInput): Promise<SustainableTipsOutput> {\n  return generateSustainableTipsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'sustainableTipsPrompt',\n  input: {schema: SustainableTipsInputSchema},\n  output: {schema: SustainableTipsOutputSchema},\n  prompt: `You are an expert in sustainable farming practices. Based on the farmer's crop type, land type, and current tasks, provide one short, personalized, and actionable sustainable farming tip. The tip should be concise and easy to understand.\n\nCrop Type: {{{cropType}}}\nLand Type: {{{landType}}}\nCurrent Tasks: {{{currentTasks}}}\n\nTip:`,\n});\n\nconst generateSustainableTipsFlow = ai.defineFlow(\n  {\n    name: 'generateSustainableTipsFlow',\n    inputSchema: SustainableTipsInputSchema,\n    outputSchema: SustainableTipsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC3B;AAGO,eAAe,wBAAwB,KAA2B;IACvE,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;IAMP,CAAC;AACL;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA1BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/verify-aadhaar-authenticity.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Verifies the authenticity of Aadhaar cards using AI.\n *\n * - verifyAadhaarAuthenticity - A function that handles the Aadhaar card authenticity verification process.\n * - VerifyAadhaarAuthenticityInput - The input type for the verifyAadhaarAuthenticity function.\n * - VerifyAadhaarAuthenticityOutput - The return type for the verifyAadhaarAuthenticity function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VerifyAadhaarAuthenticityInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of an Aadhaar card, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type VerifyAadhaarAuthenticityInput = z.infer<typeof VerifyAadhaarAuthenticityInputSchema>;\n\nconst VerifyAadhaarAuthenticityOutputSchema = z.object({\n  isAuthentic: z\n    .boolean()\n    .describe('Whether or not the Aadhaar card is authentic.'),\n  confidenceScore: z\n    .number()\n    .describe(\n      'A score between 0 and 1 indicating the confidence level of the authenticity verification.'\n    ),\n  reason: z\n    .string()\n    .describe('The reasoning behind the authenticity determination.'),\n  extractedInfo: z.object({\n      name: z.string().optional().describe(\"The name extracted from the Aadhaar card.\"),\n      aadhaarNumber: z.string().optional().describe(\"The Aadhaar number extracted from the card.\"),\n      dob: z.string().optional().describe(\"The date of birth extracted from the card.\"),\n      gender: z.string().optional().describe(\"The gender extracted from the card.\"),\n  }).describe(\"Information extracted from the Aadhaar card.\")\n});\nexport type VerifyAadhaarAuthenticityOutput = z.infer<\n  typeof VerifyAadhaarAuthenticityOutputSchema\n>;\n\nexport async function verifyAadhaarAuthenticity(\n  input: VerifyAadhaarAuthenticityInput\n): Promise<VerifyAadhaarAuthenticityOutput> {\n  return verifyAadhaarAuthenticityFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'verifyAadhaarAuthenticityPrompt',\n  input: {schema: VerifyAadhaarAuthenticityInputSchema},\n  output: {schema: VerifyAadhaarAuthenticityOutputSchema},\n  prompt: `You are an AI expert in verifying the authenticity of Indian Aadhaar cards.\n\nYou will receive a photo of a document. Your tasks are:\n1.  Determine if the document is an authentic Aadhaar card. Look for specific security features, layout, and typical information present on an Aadhaar card.\n2.  Extract key information: Name, Aadhaar Number, Date of Birth, and Gender. If any information is not clearly visible, leave the field empty.\n3.  Provide a confidence score (0 to 1) for authenticity.\n4.  Provide a clear reason for your determination, mentioning which features support or contradict authenticity.\n\nPhoto: {{media url=photoDataUri}}`,\n});\n\nconst verifyAadhaarAuthenticityFlow = ai.defineFlow(\n  {\n    name: 'verifyAadhaarAuthenticityFlow',\n    inputSchema: VerifyAadhaarAuthenticityInputSchema,\n    outputSchema: VerifyAadhaarAuthenticityOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,aAAa,uIAAA,CAAA,IAAC,CACX,OAAO,GACP,QAAQ,CAAC;IACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CACP;IAEJ,QAAQ,uIAAA,CAAA,IAAC,CACN,MAAM,GACN,QAAQ,CAAC;IACZ,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;QACrC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;QAC9C,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;QACpC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC3C,GAAG,QAAQ,CAAC;AACd;AAKO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;;;;iCAQsB,CAAC;AAClC;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport {\n  verifyLandDocAuthenticity,\n  VerifyLandDocAuthenticityInput,\n} from '@/ai/flows/verify-land-doc-authenticity';\nimport {\n  validateFarmCropContext,\n  ValidateFarmCropContextInput,\n} from '@/ai/flows/validate-farm-crop-context';\nimport { generateSustainableTips, SustainableTipsInput } from '@/ai/flows/generate-sustainable-tips';\nimport { verifyAadhaarAuthenticity, VerifyAadhaarAuthenticityInput } from '@/ai/flows/verify-aadhaar-authenticity';\n\nexport async function verifyDocumentAction(\n  input: VerifyLandDocAuthenticityInput\n) {\n  return await verifyLandDocAuthenticity(input);\n}\n\nexport async function verifyAadhaarAction(\n    input: VerifyAadhaarAuthenticityInput\n) {\n    return await verifyAadhaarAuthenticity(input);\n}\n\nexport async function validateTaskAction(input: ValidateFarmCropContextInput) {\n  return await validateFarmCropContext(input);\n}\n\nexport async function generateTipsAction(input: SustainableTipsInput) {\n    return await generateSustainableTips(input);\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;AAIA;AAIA;AACA;;;;;;;;AAEO,eAAe,qBACpB,KAAqC;IAErC,OAAO,MAAM,CAAA,GAAA,2JAAA,CAAA,4BAAyB,AAAD,EAAE;AACzC;AAEO,eAAe,oBAClB,KAAqC;IAErC,OAAO,MAAM,CAAA,GAAA,uJAAA,CAAA,4BAAyB,AAAD,EAAE;AAC3C;AAEO,eAAe,mBAAmB,KAAmC;IAC1E,OAAO,MAAM,CAAA,GAAA,yJAAA,CAAA,0BAAuB,AAAD,EAAE;AACvC;AAEO,eAAe,mBAAmB,KAA2B;IAChE,OAAO,MAAM,CAAA,GAAA,qJAAA,CAAA,0BAAuB,AAAD,EAAE;AACzC;;;IAlBsB;IAMA;IAMA;IAIA;;AAhBA,+OAAA;AAMA,+OAAA;AAMA,+OAAA;AAIA,+OAAA","debugId":null}},
    {"offset": {"line": 568, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/doc-verification/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateTipsAction as '404fdeffef27e521d190967d6ac1d51e3ef0241727'} from 'ACTIONS_MODULE0'\nexport {verifyAadhaarAction as '40d5aebf28086ea1b96e4db10f747dc33630b1bafd'} from 'ACTIONS_MODULE0'\nexport {verifyDocumentAction as '407d3e6cdb63a785364ce69716cfdda519de0be53e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 632, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/doc-verification/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/doc-verification/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/doc-verification/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA","debugId":null}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/doc-verification/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/doc-verification/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/doc-verification/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA","debugId":null}},
    {"offset": {"line": 660, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}